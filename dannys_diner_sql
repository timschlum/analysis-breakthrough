/* --------------------
   Case Study Schema
   --------------------*/

CREATE SCHEMA dannys_diner;
SET search_path = dannys_diner;

CREATE TABLE sales (
  "customer_id" VARCHAR(1),
  "order_date" DATE,
  "product_id" INTEGER
);

INSERT INTO sales
  ("customer_id", "order_date", "product_id")
VALUES
  ('A', '2021-01-01', '1'),
  ('A', '2021-01-01', '2'),
  ('A', '2021-01-07', '2'),
  ('A', '2021-01-10', '3'),
  ('A', '2021-01-11', '3'),
  ('A', '2021-01-11', '3'),
  ('B', '2021-01-01', '2'),
  ('B', '2021-01-02', '2'),
  ('B', '2021-01-04', '1'),
  ('B', '2021-01-11', '1'),
  ('B', '2021-01-16', '3'),
  ('B', '2021-02-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-07', '3');
 

CREATE TABLE menu (
  "product_id" INTEGER,
  "product_name" VARCHAR(5),
  "price" INTEGER
);

INSERT INTO menu
  ("product_id", "product_name", "price")
VALUES
  ('1', 'sushi', '10'),
  ('2', 'curry', '15'),
  ('3', 'ramen', '12');
  

CREATE TABLE members (
  "customer_id" VARCHAR(1),
  "join_date" DATE
);

INSERT INTO members
  ("customer_id", "join_date")
VALUES
  ('A', '2021-01-07'),
  ('B', '2021-01-09');

/* --------------------
   Case Study Questions
   --------------------*/

-- 1. What is the total amount each customer spent at the restaurant?
-- ANSW: Customer A has spent $76, customer B has spent $74, and customer C has spent $36.

--Example of join and filter of menu and sales schemas for queries, filtered by customer A
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id)
SELECT *
FROM sales_w_menu;

-- Sum of purchases made by customer A
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id)
SELECT SUM(price)
FROM sales_w_menu
WHERE customer_id = 'A';

-- Sum of purchases by customer B
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id)
SELECT SUM(price)
FROM sales_w_menu
WHERE customer_id = 'B';

-- Sum of purchases by customer C
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id)
SELECT SUM(price)
FROM sales_w_menu
WHERE customer_id = 'C';

-- 2. How many days has each customer visited the restaurant?
-- ANSW: Customer A has visited 4 times, customer B has visited 6 times, and customer C has visited 2 times.

--Number of distinct days customer A has visited
WITH sales_visits AS(
	SELECT DISTINCT order_date
	FROM dannys_diner.sales
  	WHERE customer_id = 'A')
SELECT COUNT(order_date)
FROM sales_visits;

--Number of distinct days customer B has visited
WITH sales_visits AS(
	SELECT DISTINCT order_date
	FROM dannys_diner.sales
  	WHERE customer_id = 'B')
SELECT COUNT(order_date)
FROM sales_visits;

--Number of distinct days customer C has visited
WITH sales_visits AS(
	SELECT DISTINCT order_date
	FROM dannys_diner.sales
  	WHERE customer_id = 'C')
SELECT COUNT(order_date)
FROM sales_visits;

-- 3. What was the first item from the menu purchased by each customer?
-- ANSW: Customer A ordered sushi, customer B ordered curry, and customer C ordered ramen.

--Sorting the menu by customer A and ascending order to see first order by that person
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id)
SELECT *
FROM sales_w_menu
WHERE customer_id = 'A'
ORDER BY order_date ASC
LIMIT 1;

--Sorting the menu by customer B and ascending order to see first order by that person
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id)
SELECT *
FROM sales_w_menu
WHERE customer_id = 'B'
ORDER BY order_date ASC
LIMIT 1;

--Sorting the menu by customer C and ascending order to see first order by that person
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id)
SELECT *
FROM sales_w_menu
WHERE customer_id = 'C'
ORDER BY order_date ASC
LIMIT 1;

-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
-- ANSW: Ramen was ordered 8 times, curry was ordered 4 times, sushi was ordered 3 times. Ramen is the most favored menu item.

--What are each of the distinct menu items in this dataframe?
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id)
SELECT DISTINCT (product_name)
FROM sales_w_menu;

--How many times is ramen ordered?
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id)
SELECT COUNT(product_name)
FROM sales_w_menu
WHERE product_name = 'ramen';

--How many times is curry ordered?
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id)
SELECT COUNT(product_name)
FROM sales_w_menu
WHERE product_name = 'curry';

-- How many times is sushi ordered?
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id)
SELECT COUNT(product_name)
FROM sales_w_menu
WHERE product_name = 'sushi';

-- 5. Which item was the most popular for each customer?
-- ANSW: Customer A prefers ramen (3 ramen, 2 curry, 1 sushi ordered), customer B prefers none of the items (they ordered 2 of each menu item), and customer C prefers ramen (ordered ramen 3 times and nothing else).

--For customer A
--How many times is ramen ordered by A?
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id
	WHERE customer_id = 'A')
SELECT COUNT(product_name)
FROM sales_w_menu
WHERE product_name = 'ramen';

--How many times is curry ordered by A?
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id
	WHERE customer_id = 'A')
SELECT COUNT(product_name)
FROM sales_w_menu
WHERE product_name = 'curry';

--How many times is sushi ordered by A?
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id
	WHERE customer_id = 'A')
SELECT COUNT(product_name)
FROM sales_w_menu
WHERE product_name = 'sushi';

--For customer B
--How many times is ramen ordered by B?
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id
	WHERE customer_id = 'B')
SELECT COUNT(product_name)
FROM sales_w_menu
WHERE product_name = 'ramen';

--How many times is curry ordered by B?
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id
	WHERE customer_id = 'B')
SELECT COUNT(product_name)
FROM sales_w_menu
WHERE product_name = 'curry';

--How many times is sushi ordered by B?
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id
	WHERE customer_id = 'B')
SELECT COUNT(product_name)
FROM sales_w_menu
WHERE product_name = 'sushi';

--For customer C
--How many times is ramen ordered by C?
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id
	WHERE customer_id = 'C')
SELECT COUNT(product_name)
FROM sales_w_menu
WHERE product_name = 'ramen';

--How many times is curry ordered by C?
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id
	WHERE customer_id = 'C')
SELECT COUNT(product_name)
FROM sales_w_menu
WHERE product_name = 'curry';

--How many times is sushi ordered by C?
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id
	WHERE customer_id = 'C')
SELECT COUNT(product_name)
FROM sales_w_menu
WHERE product_name = 'sushi';

-- 6. Which item was purchased first by the customer after they became a member?
-- ANSW: Customer A purchased curry after becoming a member and customer B purchased sushi. Customer C did not become a member.

-- Quick look at members chart:
SELECT *
FROM dannys_diner.members;

--Determining what customer A ordered after joining membership:
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id)
SELECT *
FROM sales_w_menu
WHERE customer_id = 'A' AND order_date >= '2021-01-07T00:00:00.000Z'
ORDER BY order_date ASC
LIMIT 1;

--Determining what customer B ordered after joining membership:
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id)
SELECT *
FROM sales_w_menu
WHERE customer_id = 'B' AND order_date >= '2021-01-09T00:00:00.000Z'
ORDER BY order_date ASC
LIMIT 1;

-- 7. Which item was purchased just before the customer became a member?
-- ANSW: Customer A purchased sushi before becoming a member and customer B purchased curry. Customer C did not become a member.

-- Quick look at members chart:
SELECT *
FROM dannys_diner.members;

--Determining what customer A ordered before joining membership:
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id)
SELECT *
FROM sales_w_menu
WHERE customer_id = 'A' AND order_date < '2021-01-07T00:00:00.000Z'
ORDER BY order_date ASC
LIMIT 1;

--Determining what customer B ordered before joining membership:
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id)
SELECT *
FROM sales_w_menu
WHERE customer_id = 'B' AND order_date < '2021-01-09T00:00:00.000Z'
ORDER BY order_date ASC
LIMIT 1;

-- 8. What is the total items and amount spent for each member before they became a member?
-- ANSW: Customer A purchased 2 items amounting to $25 before becoming a member. Customer B purchased 3 items amounting to $40. Customer C did not become a member.

-- Sum of purchases made by customer A before membership
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id)
SELECT SUM(price)
FROM sales_w_menu
WHERE customer_id = 'A' AND order_date < '2021-01-07T00:00:00.000Z';

-- Count of purchases made by customer A before membership
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id)
SELECT COUNT(order_date)
FROM sales_w_menu
WHERE customer_id = 'A' AND order_date < '2021-01-07T00:00:00.000Z';

-- Sum of purchases by customer B before membership
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id)
SELECT SUM(price)
FROM sales_w_menu
WHERE customer_id = 'B' AND order_date < '2021-01-09T00:00:00.000Z';

-- Count of purchases made by customer B before membership
WITH sales_w_menu AS(
	SELECT *
	FROM dannys_diner.sales
	INNER JOIN dannys_diner.menu
	ON dannys_diner.sales.product_id = dannys_diner.menu.product_id)
SELECT COUNT(order_date)
FROM sales_w_menu
WHERE customer_id = 'B' AND order_date < '2021-01-09T00:00:00.000Z';

-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
--ANSW: Customer A would have 86 points, customer B would have 94 points, and (though its not clear if C would qualify) customer C would have 36 points.

--Manipulating the table to add a new column calculating the member points and filtering for customer A
SELECT menu_w_sales.*, 
CASE WHEN menu_w_sales.product_name = 'sushi' THEN price*2 
ELSE price
END AS member_points
FROM 
(SELECT *
    FROM dannys_diner.sales
    INNER JOIN dannys_diner.menu
    ON dannys_diner.sales.product_id = dannys_diner.menu.product_id) AS menu_w_sales
WHERE customer_id = 'A';

--Manipulating the table to add a new column calculating the member points and filtering for customer B
SELECT menu_w_sales.*, 
CASE WHEN menu_w_sales.product_name = 'sushi' THEN price*2 
ELSE price
END AS member_points
FROM 
(SELECT *
    FROM dannys_diner.sales
    INNER JOIN dannys_diner.menu
    ON dannys_diner.sales.product_id = dannys_diner.menu.product_id) AS menu_w_sales
WHERE customer_id = 'B';

--Manipulating the table to add a new column calculating the member points and filtering for customer C
SELECT menu_w_sales.*, 
CASE WHEN menu_w_sales.product_name = 'sushi' THEN price*2 
ELSE price
END AS member_points
FROM 
(SELECT *
    FROM dannys_diner.sales
    INNER JOIN dannys_diner.menu
    ON dannys_diner.sales.product_id = dannys_diner.menu.product_id) AS menu_w_sales
WHERE customer_id = 'C';

-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?
--ANSW: Customer A would have 152 points and customer B would have 124 points.

--Changing my previous query to filter for the date as well as a double all menu items.
--For customer A:
SELECT menu_w_sales.*, 
CASE WHEN
	menu_w_sales.product_name = 'sushi'
	OR menu_w_sales.product_name = 'ramen'
    OR menu_w_sales.product_name = 'curry'
    THEN price*2 
ELSE price
END AS member_points
FROM 
(SELECT *
    FROM dannys_diner.sales
    INNER JOIN dannys_diner.menu
    ON dannys_diner.sales.product_id = dannys_diner.menu.product_id) AS menu_w_sales
WHERE customer_id = 'A' AND order_date < '2021-01-31T00:00:00.000Z';

--For customer B:
SELECT menu_w_sales.*, 
CASE WHEN
	menu_w_sales.product_name = 'sushi'
	OR menu_w_sales.product_name = 'ramen'
    OR menu_w_sales.product_name = 'curry'
    THEN price*2 
ELSE price
END AS member_points
FROM 
(SELECT *
    FROM dannys_diner.sales
    INNER JOIN dannys_diner.menu
    ON dannys_diner.sales.product_id = dannys_diner.menu.product_id) AS menu_w_sales
WHERE customer_id = 'B' AND order_date < '2021-01-31T00:00:00.000Z';

--For customer C:
SELECT menu_w_sales.*, 
CASE WHEN
	menu_w_sales.product_name = 'sushi'
	OR menu_w_sales.product_name = 'ramen'
    OR menu_w_sales.product_name = 'curry'
    THEN price*2 
ELSE price
END AS member_points
FROM 
(SELECT *
    FROM dannys_diner.sales
    INNER JOIN dannys_diner.menu
    ON dannys_diner.sales.product_id = dannys_diner.menu.product_id) AS menu_w_sales
WHERE customer_id = 'C' AND order_date < '2021-01-31T00:00:00.000Z';
